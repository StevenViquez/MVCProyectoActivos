@model Infrastructure.Models.Usuario



@* Se fuerza que no utilice el layout de la aplicación para que no muestre el menú.*@
@{
    Layout = Layout = "~/Views/Shared/_Login.cshtml"; ;
}

@{
    ViewBag.Title = "Login";
}

<h2>Login</h2>

@if (TempData["Message"] != null)
{
    string mensaje = @"<div class='alert alert-danger alert-dismissible' role='alert'><button type='button' class='close' data-dismiss='alert' aria-label='Close'>
<span aria-hidden='true'>&times;</span> </button><strong>Error!</strong> " + TempData["Message"] + " </div>";
@Html.Raw(mensaje);
}


@using (Html.BeginForm("Login", "Login"))
{
    @Html.AntiForgeryToken()


    <div class="form-horizontal">

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Login, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Login, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Login, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*Campo tipo password*@
                @Html.PasswordFor(model => model.Password, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Log in" class="btn btn-success" />
            </div>
        </div>
    </div>


}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
